(ns acme.stepic.RegisterFormPage
  (:require
   ["package:flutter/material.dart" :as m]
   [ cljd.flutter :as f]
   [cljd.string :as str]))


(defonce *formState* (atom {:isPasswordObscure true
                            :isConfirmPasswordObscure true
                            :pass ""
                            :conf ""}))

(defonce *formData* (atom {:name ""
                           :email ""
                           :story ""
                           :pass ""
                           :phone ""
                           }))

(defn NameValidator
  [value]
  (cond
    (> (count value) 10)
    "Length of string must be less than 10 symbols"
    (str/blank? value)
    "String must not be empty"
    (not (re-matches #"[A-z]+\s[A-z]+" value))
    "Please enter alphabetical characters"
    :else nil)
  ;; (when (> (count value) 10)
  ;;   "Length of string must be less than 10 symbols")
  )


(defn EmailValidator
  [value]
  (cond
    (str/blank? value)
    "Email must not be empty"
    (not (str/includes? value "@"))
    "Invalid email address"
    :else nil))


(defn NumberValidator
  [value]
  (when (not (re-matches #"^\+?\d{4}-\d{3}-\d{4}$" value))
    "Phone number must be entered as +XXXX-XXX-XXXX"))


(defn PasswordValidator
  [value *fontState*]
  (cond
    (str/blank? value)
    "Password must not be empty"
    (< (count value) 8)
    "Password must contain at least 8 symbols"
    (not (= (:pass @*fontState*) (:conf @*fontState*)))
    "Password is not match"
    :else nil))



(defn RegisterFormPage []
  (f/widget
    :get [m/ScaffoldMessenger]
    :let [form-key (#/(m/GlobalKey m/FormState))]
    :managed [nameController (m/TextEditingController)]
    :managed [emailController (m/TextEditingController)]
    :managed [phoneController (m/TextEditingController)]
    :managed [storyController (m/TextEditingController)]
    :managed [passwordController (m/TextEditingController)]
    :managed [passwordConfirmController (m/TextEditingController)]
    :context ctx
    ;; :bg-watcher
    ;;     ([^m/TextEditingValue
    ;;       {second-input-text .-text} text-controller ]
    ;;      (dart:core/print
    ;;        (str "Second text field: " second-input-text)))

    :watch [state *formState*]
    (m/Scaffold
      .appBar
      (m/AppBar
        .title (m/Text "RegisterFormPage")
        .centerTitle true)
      .body
      (m/Form
        .key form-key
        .child
        (m/ListView
          .padding (m/EdgeInsets.all 16)
          .children
          [
           (m/TextFormField
                                        ;.inputFormatters
                                        ;[m/FilteringTextInputFormatter.digitsOnly]
             .controller nameController
             .validator
             (fn [value]
               (NameValidator value))
             .decoration
             (m/InputDecoration
               .hintText "What is your name?"
               .labelText "Full Name *"
               .prefixIcon (m/Icon m/Icons.person)
               .suffixIcon (m/Icon m/Icons.delete_outline
                             .color (m/Colors.red))
               .enabledBorder
               (m/OutlineInputBorder
                 .borderSide (m/BorderSide
                               .color (m/Colors.black)
                               .width 2.0)
                 .borderRadius
                 (m/BorderRadius.all
                   (m/Radius.circular 20)))

               .focusedBorder
               (m/OutlineInputBorder
                 .borderSide (m/BorderSide
                               .color (m/Colors.blue)
                               .width 2.0)
                 .borderRadius
                 (m/BorderRadius.all
                   (m/Radius.circular 20)))))
           (m/SizedBox .height 10)

           (m/TextFormField
             ;; PHONE
             .controller phoneController
             .validator (fn [value] (NumberValidator value))
             .keyboardType (m/TextInputType.phone)
             ;; .inputFormatters
             ;; [FilteringTextInputFormatter (re-matches)]
             ;; не получилось запретить писать буквы и фильтровать телефон
             .decoration
             (m/InputDecoration
               .labelText "Phone Number *"
               .hintText "Input your phone number"
               .helperText "Phone format: +7900-000-0000"
               .prefixIcon (m/Icon (m/Icons.call))
               .suffixIcon (m/Icon m/Icons.delete_outline
                             .color (m/Colors.red))
               .enabledBorder
               (m/OutlineInputBorder
                 .borderSide (m/BorderSide
                               .color (m/Colors.black)
                               .width 2.0)
                 .borderRadius
                 (m/BorderRadius.all
                   (m/Radius.circular 20)))

               .focusedBorder
               (m/OutlineInputBorder
                 .borderSide (m/BorderSide
                               .color (m/Colors.blue)
                               .width 2.0)
                 .borderRadius
                 (m/BorderRadius.all
                   (m/Radius.circular 20)))))
           (m/SizedBox .height 10)

           (m/TextFormField
             ;; EMAIL
             .controller emailController
             .validator (fn [value] (EmailValidator value))
             .keyboardType (m/TextInputType.emailAddress)
             .decoration
             (m/InputDecoration
               .labelText "Email Addres *"
               .hintText "Input your email addres"
               .icon (m/Icon (m/Icons.mail))
               ))
           (m/SizedBox .height 20)

           (m/TextFormField
             .controller storyController
                                        ;.inputFormatters
                                        ;[(m/LengthLimitingTextInputFormatter 10)]
             .validator
             (fn [value]
               (when (str/blank? value)
                 "Please enter some text"))
             .maxLines 3
             .decoration
             (m/InputDecoration
               .labelText "Life Story *"
               .hintText "Tell us about yourself"
               .helperText "Keep it short, this is just a demo"
               .border (m/OutlineInputBorder)))
           (m/SizedBox .height 10)

           (m/TextFormField
                                        ;.maxLength 8
             ;; ПАРОЛЬ
             .controller passwordController
             .onChanged(fn [text] (swap! *formState* assoc :pass text))
             .obscureText (:isPasswordObscure @*formState*)
             .validator
             (fn [value]
               (PasswordValidator
                 value
                 *formState*))
             .decoration
             (m/InputDecoration
               .labelText "Password *"
               .hintText "Enter the password"
               .icon (m/Icon (m/Icons.security))
               .suffixIcon
               (m/IconButton
                 .icon (m/Icon (m/Icons.visibility))
                 .onPressed
                 (fn []
                   (swap! *formState* update :isPasswordObscure not)))
               ))
           (m/SizedBox .height 10)

           (m/TextFormField
             .controller passwordConfirmController
             ;; ПОДТВЕРДИТЬ ПАРОЛЬ
             ;; .maxLength 8
             .onChanged(fn [text] (swap! *formState* assoc :conf  text))
             .obscureText (:isConfirmPasswordObscure @*formState*)
             .validator
             (fn [value]
               (PasswordValidator value *formState*))
             .decoration
             (m/InputDecoration
               .hintText "Confirm the password"
               .icon (m/Icon (m/Icons.border_color))
               .suffixIcon
               (m/IconButton
                 .icon (m/Icon (m/Icons.visibility))
                 .onPressed
                 (fn []
                   (swap! *formState* update :isConfirmPasswordObscure not)))
               .labelText "Confirm Password *"))
           (m/SizedBox .height 10)

           (m/ElevatedButton
             .style (m/ElevatedButton.styleFrom
                      .primary (m/Color 0xFF2AAE49))
             .onPressed
             #(when (.validate (.-currentState form-key))

                (swap! *formData* assoc :name (.text nameController))
                (swap! *formData* assoc :email (.text emailController))
                (swap! *formData* assoc :phone (.text phoneController))
                (swap! *formData* assoc :story (.text storyController))

                (m/showDialog
                  .context ctx
                  .builder
                  (f/build
                    :let [storyText (.text storyController)]
                    ;; :let [nameText (.text nameController)]
                    :let [phoneText (.text phoneController)]
                    (m/AlertDialog
                      .content
                      (m/Text (str (:name @*formData*) " " storyText " " phoneText)))))
                ;; (.showSnackBar scaffold-messenger
                ;;   (m/SnackBar .content (m/Text "Form is valid")))
                nil)
             ;; (fn []
             ;;   (m/showDialog
             ;;     .context ctx
             ;;     .builder
             ;;     (f/build
             ;;       :let [{:flds [text]} storyController]
             ;;       (m/AlertDialog .content (m/Text text)))) nil)

             ;;(swap! counter-state update :count dec)
             .child (m/Text "Submit")
             )
           ]
          )))))
