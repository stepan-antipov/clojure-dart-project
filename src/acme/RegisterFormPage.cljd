(ns acme.stepic.RegisterFormPage
  (:require
   ["package:flutter/material.dart" :as m]
   [ cljd.flutter :as f]
   [cljd.string :as str]))


(defonce *formState*
  (atom {:isPasswordObscure true
         :isConfirmPasswordObscure true
         :pass ""
         :conf ""
         :name ""
         :email ""
         :story ""
         :phone ""
         :selectedValue ""}))




(defn NameValidator
  [value]
  (cond
    (> (count value) 10)
    "Length of string must be less than 10 symbols"
    (str/blank? value)
    "String must not be empty"
    (not (re-matches #"[A-z]+\s[A-z]+" value))
    "Please enter alphabetical characters"
    :else nil)
  ;; (when (> (count value) 10)
  ;;   "Length of string must be less than 10 symbols")
  )


(defn EmailValidator
  [value]
  (cond
    (str/blank? value)
    "Email must not be empty"
    (not (str/includes? value "@"))
    "Invalid email address"
    :else nil))


(defn NumberValidator
  [value]
  (when (not (re-matches
               #"\d{3}"
                                        ;#"^\+?\d{4}-\d{3}-\d{4}$"
               value))
    "Phone number must be entered as +XXXX-XXX-XXXX"))


(defn PasswordValidator
  [value *formState*]
  (cond
    (str/blank? value)
    "Password must not be empty"
    (< (count value) 3)
    "Password must contain at least 8 symbols"
    (not (= (:pass @*formState*) (:conf @*formState*)))
    "Password is not match"
    :else nil))



(def countries ["Russia", "Ukraine", "Germany", "England"])


(defn fieldFocusChange
  "Смена фокуса элементов"
  [{:keys [ctx currentFocus nextFocus]}]
  (do
    (.unfocus ^m/FocusNode currentFocus)
    (-> m/FocusScope (.of ctx) (.requestFocus nextFocus))))



(defn show-message
  "показывает сообщение, если форма не валидна"
  [{:keys [scaffold-messenger]}]
  (.showSnackBar
    scaffold-messenger
    (m/SnackBar
      .duration (Duration .seconds 5)
      .backgroundColor m/Colors.red
      .content (m/Text
                 "Form is not valide! Please review and try again!"
                 .style (m/TextStyle
                          .color m/Colors.black
                          .fontWeight m/FontWeight.w600
                          .fontSize 18.0)))) nil)

(defn clear-field
  "Очистить инпут от данных"
  [{:keys [controller state]}]
  (do
    (.clear controller)
    (swap! state assoc :name "")))


(defn RegisterFormPage []
  (f/widget
    :get [m/ScaffoldMessenger]
    :let [form-key (#/(m/GlobalKey m/FormState))]
    :let [nameFocus (m/FocusNode)]
    :let [phoneFocus (m/FocusNode)]
    :let [passFocus (m/FocusNode)]
    :let [confFocus (m/FocusNode)]
    :managed [nameController (m/TextEditingController)]
    :managed [emailController (m/TextEditingController)]
    :managed [phoneController (m/TextEditingController)]
    :managed [storyController (m/TextEditingController)]
    :managed [passwordController (m/TextEditingController)]
    :managed [passwordConfirmController (m/TextEditingController)]
    :context ctx
    :watch [state *formState*]
    (m/Scaffold
      .appBar
      (m/AppBar
        .title (m/Text "RegisterFormPage")
        .centerTitle true)
      .body
      (m/Form
        .key form-key
        .child
        (m/ListView
          .padding (m/EdgeInsets.all 16)
          .children
          [
           ;; NAME
           (m/TextFormField
             .focusNode nameFocus
             .autofocus true
             .onFieldSubmitted
             (fn [_]
               (fieldFocusChange {:ctx ctx
                                  :currentFocus nameFocus
                                  :nextFocus phoneFocus}))
             .controller nameController
             .validator
             (fn [value]
               (NameValidator value))
             .decoration
             (m/InputDecoration
               .hintText "What is your name?"
               .labelText "Full Name *"
               .prefixIcon (m/Icon m/Icons.person)
               .suffixIcon
               (m/GestureDetector
                 .child (m/Icon m/Icons.delete_outline
                          .color (m/Colors.red))
                 .onTap
                 (fn []
                   (clear-field {:controller nameController
                                 :state *formState*})))
               .enabledBorder
               (m/OutlineInputBorder
                 .borderSide (m/BorderSide
                               .color (m/Colors.black)
                               .width 2.0)
                 .borderRadius
                 (m/BorderRadius.all
                   (m/Radius.circular 20)))

               .focusedBorder
               (m/OutlineInputBorder
                 .borderSide (m/BorderSide
                               .color (m/Colors.blue)
                               .width 2.0)
                 .borderRadius
                 (m/BorderRadius.all
                   (m/Radius.circular 20)))))
           (m/SizedBox .height 10)

           (m/TextFormField
             ;; PHONE
             .focusNode phoneFocus
             .onFieldSubmitted
             (fn [_]
               (fieldFocusChange {:ctx ctx
                                  :currentFocus phoneFocus
                                  :nextFocus passFocus}))
             .controller phoneController
             .validator (fn [value] (NumberValidator value))
             .keyboardType (m/TextInputType.phone)
             ;; .inputFormatters
             ;; [FilteringTextInputFormatter (re-matches)]
             ;; не получилось запретить писать буквы и фильтровать телефон
             .decoration
             (m/InputDecoration
               .labelText "Phone Number *"
               .hintText "Input your phone number"
               .helperText "Phone format: +7900-000-0000"
               .prefixIcon (m/Icon (m/Icons.call))
               .suffixIcon (m/GestureDetector
                             .onLongPress
                             (fn []
                               (clear-field
                                 {:controller phoneController
                                  :state *formState*}) )
                             .child
                             (m/Icon m/Icons.delete_outline
                               .color (m/Colors.red)))
               .enabledBorder
               (m/OutlineInputBorder
                 .borderSide (m/BorderSide
                               .color (m/Colors.black)
                               .width 2.0)
                 .borderRadius
                 (m/BorderRadius.all
                   (m/Radius.circular 20)))

               .focusedBorder
               (m/OutlineInputBorder
                 .borderSide (m/BorderSide
                               .color (m/Colors.blue)
                               .width 2.0)
                 .borderRadius
                 (m/BorderRadius.all
                   (m/Radius.circular 20)))))
           (m/SizedBox .height 10)

           (m/TextFormField
             ;; EMAIL
             .controller emailController
             .validator (fn [value] (EmailValidator value))
             .keyboardType (m/TextInputType.emailAddress)
             .decoration
             (m/InputDecoration
               .labelText "Email Addres *"
               .hintText "Input your email addres"
               .icon (m/Icon (m/Icons.mail))
               ))
           (m/SizedBox .height 20)

           (m/DropdownButtonFormField
             .decoration
             (m/InputDecoration
               .border (m/OutlineInputBorder)
               .icon (m/Icon m/Icons.map)
               .labelText "Country?")
             .items (map
                      (fn [elem]
                        (m/DropdownMenuItem
                          .value elem
                          .child (m/Text (str elem))))
                      countries)
             .onChanged (fn [data]
                          (swap! *formState* assoc :selectedValue data))
             .validator (fn [value] (if (str/blank? value) "Select county" nil)))


           (m/SizedBox .height 20)
           (m/TextFormField
             .controller storyController
                                        ;.inputFormatters
                                        ;[(m/LengthLimitingTextInputFormatter 10)]
             .validator
             (fn [value]
               (when (str/blank? value)
                 "Please enter some text"))
             .maxLines 3
             .decoration
             (m/InputDecoration
               .labelText "Life Story *"
               .hintText "Tell us about yourself"
               .helperText "Keep it short, this is just a demo"
               .border (m/OutlineInputBorder)))
           (m/SizedBox .height 10)

           (m/TextFormField
             ;; ПАРОЛЬ
             .focusNode passFocus
             .onFieldSubmitted
             (fn [_]
               (fieldFocusChange {:ctx ctx
                                  :currentFocus passFocus
                                  :nextFocus confFocus}))
             .controller passwordController
             .onChanged(fn [text] (swap! *formState* assoc :pass text))
             .obscureText (:isPasswordObscure @*formState*)
             .validator
             (fn [value]
               (PasswordValidator
                 value
                 *formState*))
             .decoration
             (m/InputDecoration
               .labelText "Password *"
               .hintText "Enter the password"
               .icon (m/Icon (m/Icons.security))
               .suffixIcon
               (m/IconButton
                 .icon (m/Icon (m/Icons.visibility))
                 .onPressed
                 (fn []
                   (swap! *formState* update :isPasswordObscure not)))
               ))
           (m/SizedBox .height 10)

           (m/TextFormField
             .focusNode confFocus
             .controller passwordConfirmController
             .onChanged(fn [text] (swap! *formState* assoc :conf  text))
             .obscureText (:isConfirmPasswordObscure @*formState*)
             .validator
             (fn [value]
               (PasswordValidator value *formState*))
             .decoration
             (m/InputDecoration
               .hintText "Confirm the password"
               .icon (m/Icon (m/Icons.border_color))
               .suffixIcon
               (m/IconButton
                 .icon (m/Icon (m/Icons.visibility))
                 .onPressed
                 (fn []
                   (swap! *formState* update :isConfirmPasswordObscure not)))
               .labelText "Confirm Password *"))
           (m/SizedBox .height 10)

           (m/ElevatedButton
             .style (m/ElevatedButton.styleFrom
                      .primary (m/Color 0xFF2AAE49))
             .onPressed
             (fn []
               (if (.validate (.-currentState form-key))
                 ((swap! *formState* assoc :name
                    (.-text nameController))
                  (swap! *formState* assoc :email
                    (.-text emailController))
                  (swap! *formState* assoc :phone
                    (.-text phoneController))
                  (swap! *formState* assoc :story
                    (.-text storyController))
                  (m/showDialog
                    .context ctx
                    .builder
                    (f/build
                      :get [m/Navigator]
                      :let [storyText (.text storyController)]
                      ;; :let [nameText (.text nameController)]
                      :let [phoneText (.text phoneController)]
                      (m/AlertDialog
                        .title
                        (m/Text
                          "Registration successful!"
                          .style
                          (m/TextStyle .color (m/Colors.green)))
                        .actions [(m/TextButton
                                    .child (m/Text
                                             "Verified"
                                             .style (m/TextStyle
                                                      .color m/Colors.green
                                                      .fontSize 18))
                                    .onPressed
                                    (fn []
                                      (.pop navigator)))]
                        .content
                        (m/Text
                          (str "Выши данные: "
                            (:name @*formState*)
                            " "
                            storyText
                            " "
                            phoneText
                            "\n"
                            "Форма успешно прошла валидацию!")
                          .style (m/TextStyle
                                   .fontSize 18
                                   .fontWeight
                                   (m/FontWeight.w700))))))
                  ;; (.showSnackBar scaffold-messenger
                  ;;   (m/SnackBar .content (m/Text "Form is valid")))
                  nil)
                 (show-message {:scaffold-messenger scaffold-messenger})) ;; if
               ) ;;fn []
             ;; (fn []
             ;;   (m/showDialog
             ;;     .context ctx
             ;;     .builder
             ;;     (f/build
             ;;       :let [{:flds [text]} storyController]
             ;;       (m/AlertDialog .content (m/Text text)))) nil)

             ;;(swap! counter-state update :count dec)
             .child (m/Text "Submit")
             )
           ]
          )))))
